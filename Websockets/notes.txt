wss (WebSocketServer)

wss stands for WebSocketServer and represents the WebSocket server. It is responsible for accepting WebSocket connections from clients. In your code, wss is an instance of the WebSocketServer class provided by the ws library.

WebSocketServer: This class is used to create a WebSocket server that can listen for and manage WebSocket connections from clients.
wss: An instance of the WebSocketServer class, representing the server that listens for incoming WebSocket connections.


ws (WebSocket Connection)

ws represents an individual WebSocket connection between a client and the server. When a client connects to the WebSocket server (wss), a ws object is created to represent that connection. This object is used to communicate with the specific client.

ws: Represents the WebSocket connection to a specific client. When a client connects, a ws object is created for that connection.
ws.on('message', ...): Sets up an event handler to process messages received from this client.
ws.send(...): Sends a message to this specific client.



wss.on("connection", function connection(ws) { ... });
ws.on("error", console.error);
ws.on("message", function message(data, isBinary) { ... });
ws.on("close", function close(code, reason) { ... });
ws.on("open", function open() { ... });


isBinary argument, if the data sent is binary (media, video etc) we get a true if not we get 

wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
        client.send(data, { binary: isBinary });
}


it runs over all the clients conneted, and checks the state 

WebSocket Ready States
The WebSocket API defines several ready states that represent the status of the WebSocket connection:

CONNECTING (0): The connection is not yet open.
OPEN (1): The connection is open and ready to communicate.
CLOSING (2): The connection is in the process of closing.
CLOSED (3): The connection is closed or could not be opened.

https://chatgpt.com/share/af106baf-3e1b-49d8-b058-858231c06cf1
