import { fetch, Agent } from "undici";
import fs from "fs";

// Bypass SSL verification
const httpsAgent = new Agent({
  connect: {
    rejectUnauthorized: false,
  },
});

async function fetchResults() {
  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"; // Ignore SSL certificate errors

  const formBoundary = "----WebKitFormBoundaryLXDerEnh7OPHHBfC";

  const headers = {
    "Content-Type": `multipart/form-data; boundary=${formBoundary}`,
    "sec-ch-ua": '"Not/A)Brand";v="8", "Chromium";v="126", "Brave";v="126"',
    "sec-ch-ua-mobile": "?1",
    "sec-ch-ua-platform": '"Android"',
    "upgrade-insecure-requests": "1",
    Referer: "https://onlineresults.unipune.ac.in/Result/Dashboard/Default",
    "Referrer-Policy": "strict-origin-when-cross-origin",
  };

  const createFormData = (
    patternID: string,
    patternName: string,
    seatNo: string,
    motherName: string
  ) => {
    return `--${formBoundary}\r\nContent-Disposition: form-data; name="PatternID"\r\n\r\n${patternID}\r\n--${formBoundary}\r\nContent-Disposition: form-data; name="PatternName"\r\n\r\n${patternName}\r\n--${formBoundary}\r\nContent-Disposition: form-data; name="SeatNo"\r\n\r\n${seatNo}\r\n--${formBoundary}\r\nContent-Disposition: form-data; name="MotherName"\r\n\r\n${motherName}\r\n--${formBoundary}--\r\n`;
  };

  const sendRequest = async (seatNo: string, motherName: string) => {
    const body = createFormData(
      "OJj/vWOWq0LY+3wKuGCrYg==", // Replace with actual PatternID
      "pAHWmX+K1qkkEk0IVOoggVOZp3VQ7Pxy8o6Xjzwu+uU=", // Replace with actual PatternName
      seatNo,
      motherName
    );

    try {
      const response = await fetch(
        "https://onlineresults.unipune.ac.in/Result/Dashboard/ViewResult1",
        {
          method: "POST",
          headers,
          body,
          dispatcher: httpsAgent, // Use custom agent
        }
      );

      if (!response.ok) {
        throw new Error(`Request failed with status ${response.status}`);
      }

      return response.text(); // Adjust based on the actual response format
    } catch (error) {
      console.error("Error:", error);
      return null;
    }
  };

  const seatNumbers = ["S190058670", "S190058671"]; // Add more seat numbers here
  const motherNames = ["NIRMALA", "MOTHER_NAME2"]; // Corresponding mother names

  const promises = seatNumbers.map((seatNo, index) => {
    return sendRequest(seatNo, motherNames[index]);
  });

  var results = await Promise.all(promises);
  const inp[] = results || "Hi";
  fs.writeFile("mynewfile3.txt", inp, function (err) {
    if (err) throw err;
    console.log("Replaced!");
  });

  results.forEach((result, index) => {
    if (result) {
      console.log(`Result for ${seatNumbers[index]}:`, result);
    } else {
      console.log(`Failed to fetch result for ${seatNumbers[index]}`);
    }
  });
}

fetchResults();
